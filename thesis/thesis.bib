@BOOK{TP,
AUTHOR="Terence Parr",
TITLE="Language Implementation Patterns",
PUBLISHER="The Pragmatic Programmers, LLC",
YEAR="2010",
}
@BOOK{AA,
AUTHOR="Alfred V. Aho and Monica S. Lam and Ravi Sethi and Jeffrey D. Ullman",
TITLE="Compilers: Principles, Techniques, and Tools",
PUBLISHER="Pearson Eudcation, Inc.",
YEAR="2006",
}
@BOOK{CQ,
AUTHOR="Christian Queinnec",
TITLE="Lisp in Small Pieces",
PUBLISHER="Cambridge University Press",
YEAR="2003",
}
@BOOK{MF,
AUTHOR="Michael Fogus",
TITLE="Functional JavaScript",
PUBLISHER="O'Reilly Media",
YEAR="2013",
}
@BOOK{ELIX,
AUTHOR="Chris McCord",
TITLE="Metaprogramming Elixir: Write Less Code, Have More Fun",
PUBLISHER="The Pragmatic Programmers, LLC",
YEAR="2015",
}
@ARTICLE{JCM,
AUTHOR="John McCarthy",
TITLE="Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I",
JOURNAL="Communications Of The ACM",
YEAR="1960",
MONTH="4",
}
@ARTICLE{FRP,
AUTHOR="Conal Elliott and Paul Hudak",
TITLE="Functional Reactive Programming",
JOURNAL="Proceedings of the second ACM SIGPLAN international conference on Functional programming",
YEAR="1997",
}
@ARTICLE{RPM,
AUTHOR="Matthew Flatt",
TITLE="Creating Languages In Racket",
JOURNAL="acmqueue",
YEAR="2011",
VOLUME="9",
ISSUE="11",
MONTH="9",
}
@ONLINE{ECMA6,
AUTHOR={{ECMA International}},
TITLE="ECMAScript\textregistered 2015 Language Specification",
YEAR="2015",
URL={http://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf},
URLDATE={2016-12-07},
}
@ONLINE{ECMA7,
AUTHOR={{ECMA International}},
TITLE="ECMAScript\textregistered 2017 Language Specification",
YEAR="2016",
URL={https://tc39.github.io/ecma262/},
URLDATE={2016-12-07},
}
@ONLINE{DOM4,
AUTHOR={{World Wide Web Consortium}},
TITLE="W3C DOM",
YEAR="2015",
URL={https://www.w3.org/TR/dom/},
URLDATE={2016-12-07},
}
@ONLINE{ZAKA,
AUTHOR="Alon Zakai",
TITLE="Emscripten: An LLVM-to-JavaScript Compiler",
YEAR="2013",
URL={https://github.com/kripken/emscripten/blob/master/docs/paper.pdf},
URLDATE={2016-14-07},
}
@BACHELORSTHESIS{CPL,
AUTHOR="Evan Czaplicki",
TITLE="Elm: Concurrent FRP for Functional GUIs",
YEAR="2012",
MONTH="4",
SCHOOL="Harvard",
TYPE="Senior Thesis",
}
@ONLINE{CLJS,
AUTHOR="Rick Hickey",
TITLE="The ClojureScript Wiki",
YEAR="2016",
URL={https://github.com/clojure/clojurescript/wiki},
URLDATE={2016-14-07},
}
@UNPUBLISHED{STEG,
AUTHOR="Luite Stegeman",
TITLE="Solving the JavaScript Problem",
YEAR="2015",
NOTE="CodeNode",
URL={https://skillsmatter.com/skillscasts/6543-talk-by-luite-stegeman},
URLDATE={2016-15-07},
}
@INPROCEEDINGS{PYPY,
address = {Genova, Italy},
title = {Tracing the meta-level: {PyPy's} tracing {JIT} compiler},
isbn = {978-1-60558-541-3},
shorttitle = {Tracing the meta-level},
url = {http://portal.acm.org/citation.cfm?id=1565827},
doi = {10.1145/1565824.1565827},
abstract = {We attempt to apply the technique of Tracing {JIT} Compilers in the context of the {PyPy} project, i.e., to programs that are interpreters for some dynamic languages, including Python. Tracing {JIT} compilers can greatly speed up programs that spend most of their time in loops in which they take similar code paths. However, applying an unmodified tracing {JIT} to a program that is itself a bytecode interpreter results in very limited or no speedup. In this paper we show how to guide tracing {JIT} compilers to greatly improve the speed of bytecode interpreters. One crucial point is to unroll the bytecode dispatch loop, based on two kinds of hints provided by the implementer of the bytecode interpreter. We evaluate our technique by applying it to two {PyPy} interpreters: one is a small example, and the other one is the full Python interpreter.},
booktitle = {Proceedings of the 4th workshop on the Implementation, Compilation, Optimization of {Object-Oriented} Languages and Programming Systems},
publisher = {{ACM}},
author = {Carl Friedrich Bolz and Antonio Cuni and Maciej Fijalkowski and Armin Rigo},
year = {2009},
pages = {18--25}
},
